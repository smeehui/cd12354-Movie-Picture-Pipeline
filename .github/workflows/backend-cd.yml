name: Backend Continuous Deployment

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint-backend:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-backend-lint
      cancel-in-progress: true

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel pytest flake8

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          cd starter/backend
          pipenv install

      - name: Back-end lint
        run: cd starter/backend && pipenv run lint

  test-backend:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-backend-test
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel pytest flake8

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          cd starter/backend
          pipenv install

      - name: Back-end test
        run: cd starter/backend && pipenv run test

  be-deploy:
    needs:  ['lint-backend','test-backend']
    runs-on: ubuntu-latest
    environment: movie_dev_ops
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ vars.AWS_ACCOUNT_ID }}
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_BE_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          cd starter/backend
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG"
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update Deployment Image Tag
        working-directory: "starter/backend/k8s"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_BE_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Configure Kubernetes client
        uses: silverlyra/setup-aws-eks@v0.1
        working-directory: "starter/backend/k8s"
        with:
          cluster: ${{ vars.EKS_CLUSTER }}
        run: |
          kubectl apply -f .
          kubectl rollout restart deployment/backend