# This is a basic workflow to help you get started with Actions

name: Frontend Continuous Integration

# Controls when the workflow will run
on:
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint-frontend:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-frontend-lint
      cancel-in-progress: true

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.2

      - id: cache-node
        uses: actions/cache@v1
        with:
          path: ~/.local/share/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}

      - name: Install deps
        if: steps.cache-node.outputs.cache-hit != 'true'
        #        run: echo "skipped"
        run: cd starter/frontend && npm i --force

      - name: Front-end lint
        run: cd starter/frontend && npm run lint

  test-frontend:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-frontend-test
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.2

      - name: Install deps
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: cd starter/frontend && npm i --force

      - name: Front-end test
        run: cd starter/frontend && npm run test
  build-frontend:
    needs: [ 'lint-frontend','test-frontend' ]
    runs-on: ubuntu-latest
    environment: movie_dev_ops
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: PRE-DEPLOY
          ECR_REPOSITORY: ${{ vars.ECR_FE_REPO_NAME }}
          IMAGE_TAG: latest
          BACKEND_ENDPOINT: ${{ vars.BACKEND_ENDPOINT }}
        run: |
          cd starter/frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=$BACKEND_ENDPOINT -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"